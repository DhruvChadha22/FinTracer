// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                 = "zod-prisma"
  output                   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel            = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports                  = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Items {
  id              String          @id
  userId          String
  accessToken     String
  txnCursor       String?
  bankName        String?
  accounts        Accounts[]
}

model Accounts {
  id              String          @id
  userId          String
  name            String
  itemId          String
  balance         Int
  mask            String?
  transactions    Transactions[]
  item            Items           @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Categories {
  id              String          @id       @default(uuid())
  userId          String
  name            String
  transactions    Transactions[]
  budgets         Budgets[]
}

model Transactions {
  id              String          @id       @default(uuid())
  userId          String
  name            String
  amount          Int
  date            DateTime
  accountId       String?
  categoryId      String?
  account         Accounts?       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category        Categories?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model Budgets {
  id              String          @id       @default(uuid())
  userId          String
  name            String
  amount          Int    
  startDate       DateTime
  endDate         DateTime
  categoryId      String?
  category        Categories?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  @@unique([startDate, endDate])
}
